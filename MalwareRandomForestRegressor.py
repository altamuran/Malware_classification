# -*- coding: utf-8 -*-
"""
Created on Thu Jun 20 19:54:40 2019

@author: Inakamoto
"""

#import numpy as np
import pandas as pd     
import os
#import feature_selection
os.environ['KMP_DUPLICATE_LIB_OK']='True'
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split
#from sklearn.tree import DecisionTreeRegressor 
from xgboost import plot_importance  
from sklearn.ensemble import RandomForestRegressor  
from xgboost import XGBRegressor,XGBClassifier

def get_mae_RFR_Classifier(max_leaf_nodes, train_X, val_X, train_y, val_y):
    model = RandomForestRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)
    model.fit(train_X, train_y)
    preds_val = model.predict(val_X)
    mae = mean_absolute_error(val_y, preds_val)
    return(mae) 
    
def MalwareRandomForestRegressor(dataset,features):
    X = dataset[features]
    y = dataset.Class
    train_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1)
    candidate_max_leaf_nodes = [5, 25, 50, 100, 250, 500,1000]
    for max_l in candidate_max_leaf_nodes :
         get_mae_RFR_Classifier(max_l, train_X, val_X, train_y, val_y)
    scores = {leaf_size: get_mae_RFR_Classifier(leaf_size, train_X, val_X, train_y, val_y) for leaf_size in candidate_max_leaf_nodes}
    best_tree_size = min(scores, key=scores.get)
    print('best tree size: ',best_tree_size)
    
    malware_forest = RandomForestRegressor(random_state=1,max_leaf_nodes=best_tree_size)
    malware_forest.fit(train_X, train_y)
    preds = malware_forest.predict(val_X)
    score = mean_absolute_error(val_y, preds)
    
    print("random_forest"+"\r\n")
    print('preds:', preds)
    print("\r\n")
    print('MAE:', score)
    print("\r\n")
    
    dataset_test = 'D:/USER/malware/CSV/test.csv'
    dataset_test = pd.read_csv(dataset_test,index_col='Id') 
    test_X= dataset_test[features]
    
    
    preds = malware_forest.predict(test_X)
    print("\r\n")
    print("predizione")
    print (preds)
    
    output = pd.DataFrame({'Class': preds,'Id':dataset_test.index})
    output.to_csv('random_forest_prediction.csv', index=False)