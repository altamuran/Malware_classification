# -*- coding: utf-8 -*-
"""
Created on Sun Jun 16 11:28:21 2019

@author: USER
"""

#from handle_io import io

import numpy 
import pandas 
import header as header
import asm_feature_extraction as asm_e
import byte_feature_extraction as bye_e
from csv import writer
import os, time,traceback
 

def csvFormat(apis,dataset):
    directory_name ='D:/USER/malware/train/'
    directory_name_t ='D:/USER/malware/test/'
    if(dataset=='test'):
        directory_name=directory_name_t
    
    #directory_name ='D:/USER/malware/train_4/'
    files = os.listdir(directory_name)
    files = numpy.sort(files)
    byte_files = [i for i in files if i.endswith('.asm')]
    
    opcodes_colnames =header.header_asm_opcodes()
    registers_colnames =header.header_asm_registers()
    symbols_colnames =header.header_asm_sym()
    sections_colnames = header.header_asm_sections()
    #apis_colnames =header.header_asm_apis(apis)
    
    #reg=asm_registers(bytecode)
   # sym=asm_symbols(bytecode)
    #☺api=asm_APIs(bytecode,apis)
    

       
    if(dataset=='test'):
        opcodes_csv= open('D:/USER/malware/CSV/test_asm_opcodes.csv', 'w+')
        registers_csv =open('D:/USER/malware/CSV/test_asm_register.csv', 'w+')
        symbols_csv =open('D:/USER/malware/CSV/test_asm_symbols.csv', 'w+')
        sections_csv =open('D:/USER/malware/CSV/test_asm_sections.csv', 'w+')
    else:
        opcodes_csv= open('D:/USER/malware/CSV/asm_opcodes.csv', 'w+')
        registers_csv =open('D:/USER/malware/CSV/asm_register.csv', 'w+')
        symbols_csv =open('D:/USER/malware/CSV/asm_symbols.csv', 'w+')
        sections_csv =open('D:/USER/malware/CSV/asm_sections.csv', 'w+')
    
    

    opcodes_csv_w = writer(opcodes_csv)
    opcodes_colnames.append('Id')
    opcodes_csv_w.writerows([opcodes_colnames])
    
    symbols_csv_w = writer(symbols_csv)
    symbols_colnames.append('Id')
    symbols_csv_w.writerows([symbols_colnames])
    
    registers_csv_w = writer(registers_csv)
    registers_colnames.append('Id');
    #if(dataset!='test'):
    registers_colnames.append('Class');
    registers_csv_w.writerows([registers_colnames])
    
    sections_csv_w = writer(sections_csv)
    sections_colnames.append('Id');
    sections_csv_w.writerows([sections_colnames])

    #apis_csv  = open('D:/USER/malware/train/asm_apis.csv', 'w')
    
    sections_time = []
    opcodes_time = []
    registers_time = []
    symbols_time=[]
    b_md_time=[]
    #apis_time = []
     
    
    #opcodes_csv_w = writer(opcodes_csv)
    #opcodes_csv_w.writerows([opcodes_colnames])
 
    #apis_csv_w = writer(apis_csv)
    #apis_csv_w.writerows([apis_colnames])


    #rows = []
    for t, fname in enumerate(byte_files):
        print(t)
        f = open(directory_name+fname,'r',errors='ignore')

            #print fname
            #Meta data
        try:
            f.seek(0)
            start_time = time.time()
            registers = asm_e.asm_registers(f)
            required_time = time.time() - start_time
            registers_time.append(required_time)
            registers.append(fname[:20])
            registers_csv_w.writerows([registers])
            
            f.seek(0)

            start_time = time.time()
            opcodes = asm_e.asm_opcodes(f)
            required_time = time.time() - start_time
            opcodes_time.append(required_time)
            opcodes.append(fname[:20])
            opcodes_csv_w.writerows([opcodes])
        
            f.seek(0)

                #start_time = time.time()
                #apis = asm_APIs(f,apis)
                #required_time = time.time() - start_time
                #apis_time.append(required_time)
                #apis_csv_w.writerows([apis])
            f.seek(0)

            start_time = time.time()
            symbols = asm_e.asm_symbols(f)
            required_time = time.time() - start_time
            symbols.append(fname[:20])
            symbols_time.append(required_time)
            symbols_csv_w.writerows([symbols])
            
            f.seek(0)

            start_time = time.time()
            sections = asm_e.asm_sections(f)
            sections.append(fname[:20])
            required_time = time.time() - start_time
            sections_time.append(required_time)
            sections_csv_w.writerows([sections])
            
             
        except Exception:
            print (traceback.print_exc())
            print ("Error", fname)
            #break;
    
    opcodes_csv.flush()
    opcodes_csv.close() 
    
    registers_csv.flush()
    registers_csv.close()
    
    symbols_csv.flush()
    symbols_csv.close() 
    
    sections_csv.flush()
    sections_csv.close()
    
    #byte worker 
    

    files = os.listdir(directory_name)
    files = numpy.sort(files)
    byte_f = [i for i in files if i.endswith('.bytes')]
       
    b_md_colnames = header.header_byte_meta_data()
    #apis_colnames =header.header_asm_apis(apis)
    
    #reg=asm_registers(bytecode)
   # sym=asm_symbols(bytecode)
    #☺api=asm_APIs(bytecode,apis)
    

       
    if(dataset=='test'):
        b_md_csv= open('D:/USER/malware/CSV/test_byte_meta_data.csv', 'w+')
    else:
        b_md_csv= open('D:/USER/malware/CSV/byte_meta_data.csv', 'w+')
    
    b_md_csv_w = writer(b_md_csv)
    b_md_colnames.append('Id')
    b_md_csv_w.writerows([b_md_colnames])
    for t, fname in enumerate(byte_f):
        print(fname)
        file_path=directory_name+fname
        f = open(directory_name+fname,'r+',errors='ignore')
        try:
            f.seek(0)
            start_time = time.time()
            b_md = bye_e.byte_meta_data(file_path, f)
            required_time = time.time() - start_time
            b_md_time.append(required_time)
            b_md.append(fname[:20])
            b_md_csv_w.writerows([b_md])
       
        except Exception:
            print (traceback.print_exc())
            print ("Error", fname)
            #break;
            
    b_md_csv.flush()
    b_md_csv.close()
    
    
    if(dataset=='test'):
        a = pandas.read_csv("D:/USER/malware/CSV/test_asm_sections.csv")
        b = pandas.read_csv("D:/USER/malware/CSV/test_asm_opcodes.csv")
        b = b.dropna(axis=1)
        merged = a.merge(b,on='Id')
        merged.to_csv("D:/USER/malware/CSV/test_asm_sec_opcode.csv", index=False)
        
        a = pandas.read_csv("D:/USER/malware/CSV/test_asm_sec_opcode.csv")
        b = pandas.read_csv("D:/USER/malware/CSV/test_asm_symbols.csv")
        b = b.dropna(axis=1)
        merged = a.merge(b,on='Id')
        merged.to_csv("D:/USER/malware/CSV/test_asm_sec_sym_opcode.csv", index=False)
        
        a = pandas.read_csv("D:/USER/malware/CSV/test_asm_sec_sym_opcode.csv")
        b = pandas.read_csv("D:/USER/malware/CSV/test_asm_register.csv")
        b = b.dropna(axis=1)
        merged = a.merge(b,on='Id')
        merged.to_csv("D:/USER/malware/CSV/test_asm_sec_sym_opcode_register.csv", index=False)
        
        a = pandas.read_csv("D:/USER/malware/CSV/test_asm_sec_sym_opcode_register.csv")
        b = pandas.read_csv("D:/USER/malware/CSV/test_byte_meta_data.csv")
        b = b.dropna(axis=1)
        merged = a.merge(b,on='Id')
        merged.to_csv("D:/USER/malware/CSV/test.csv", index=False)
    
    else:
        
        a = pandas.read_csv("D:/USER/malware/CSV/asm_sections.csv")
        b = pandas.read_csv("D:/USER/malware/CSV/byte_meta_data.csv")
        b = b.dropna(axis=1)
        merged = a.merge(b,on='Id')
        merged.to_csv("D:/USER/malware/CSV/asm_sec_md.csv", index=False)
        
        a = pandas.read_csv("D:/USER/malware/CSV/asm_sec_md.csv")
        b = pandas.read_csv("D:/USER/malware/CSV/asm_opcodes.csv")
        b = b.dropna(axis=1)
        merged = a.merge(b,on='Id')
        merged.to_csv("D:/USER/malware/CSV/asm_sec_md_opcode.csv", index=False)
        
        a = pandas.read_csv("D:/USER/malware/CSV/asm_sec_md_opcode.csv")
        b = pandas.read_csv("D:/USER/malware/CSV/asm_symbols.csv")
        b = b.dropna(axis=1)
        merged = a.merge(b,on='Id')
        merged.to_csv("D:/USER/malware/CSV/asm_sec_md_sym_opcode.csv", index=False)
        
        a = pandas.read_csv("D:/USER/malware/CSV/asm_sec_md_sym_opcode.csv")
        b = pandas.read_csv("D:/USER/malware/t_labels.csv")
        b = b.dropna(axis=1)
        merged = a.merge(b,on='Id')
        merged.to_csv("D:/USER/malware/CSV/train_feature.csv", index=False)
        
        a = pandas.read_csv("D:/USER/malware/CSV/train_feature.csv")
        b = pandas.read_csv("D:/USER/malware/CSV/asm_register.csv")
        b = b.dropna(axis=1)
        merged = a.merge(b, on='Id')
        merged.to_csv("D:/USER/malware/CSV/train.csv", index=False)
    #df = pandas.read_csv('D:/USER/malware/CSV/train.csv')
    


            
            