# -*- coding: utf-8 -*-
"""
Created on Thu Jun 20 18:44:07 2019

@author: Inakamoto
"""
#import csv_extract
#from apis import apis
#import numpy as np
import pandas as pd     
import os
import feature_selection
os.environ['KMP_DUPLICATE_LIB_OK']='True'
import MalwareRandomForestRegressor as MRFR
import MalwareDecisionTreeClassificator as MDTC
import XGBMalwareModelRegressor as XGBMR
import XGBClassifierMalware as XGBC
import KNNClassificator as KNN
import XGB_Malware_pipeline
import RFClassifier as RFC
import apis
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
import csv_extract as csv_e
import plotly.plotly as py
import plotly.tools as tls
import numpy as np

#csv_e.csvFormat(apis.apis,'train')
#csv_e.csvFormat(apis.apis,'test')

#train

malware_train = 'D:/USER/malware/CSV/train.csv'
malware_train = pd.read_csv(malware_train,index_col='Id') 
malware_feature = malware_train.columns
malware_data = malware_train.dropna(axis=0)
#print(malware_data.corr(method='pearson', min_periods=1))
import sys
import feature_selection as fs
#fs.XGBMalwareModelRegressorOpcodeImportant(malware_data)
#sys.exit(0)
#
#fs.XGBClassifierMalwareImportantFeature(malware_train)
#sys.exit(0)


correlation_features= malware_data[malware_feature].corr()['Class'][:].sort_values(ascending=False).nlargest(30).index
Corr_value=malware_data[malware_feature].corr(method='pearson')['Class'][:].nlargest(10)
top_ten_correlation_features= malware_data[malware_feature].corr()['Class'][:].sort_values(ascending=False).nlargest(10).index


data = malware_data[top_ten_correlation_features]
plt.figure(figsize=(12,10))
cor = data.corr()
sns.heatmap(cor, annot=True, cmap=plt.cm.Reds)
plt.show()

correlation_features=correlation_features.drop(labels=["Class"])
malware_feature=malware_feature.drop("Class")

X = malware_train[malware_feature]
y = malware_train.Class
train_X, val_X, train_y, val_y = train_test_split(X, y,test_size=0.3, random_state=1) 


#classificatore 1
#decision tree Regressor
print('\r\n')
print('decision tree Classifiation')
MDTC.MalwareDecisionTreeClassifier(malware_data,malware_feature,'A')
print('\r\n')
print('decision tree Classifiation with correlation features')
MDTC.MalwareDecisionTreeClassifier(malware_data,correlation_features,'C')
print('\r\n')
print('decision tree Classifiation with important features')
MDTC_important_f=feature_selection.DecisionTreeClassifierImportant(malware_data)
MDTC.MalwareDecisionTreeClassifier(malware_data,MDTC_important_f,'I')

print('\r\n')
print('XGBClassifier')
XGB_Malware_pipeline.XGB_pipeline(malware_data,malware_feature,'A')

print('\r\n')
print('XGBClassifier correlation_features')
XGB_Malware_pipeline.XGB_pipeline(malware_data,correlation_features,'C')

#classificatore 4 XGBoostRegressor with importants features

print('\r\n')
print('XGBClassifier  with important features')
importanXBGClassifierFeatures=feature_selection.XGBClassifierMalwareImportantFeature(malware_data)
XGB_Malware_pipeline.XGB_pipeline(malware_data,importanXBGClassifierFeatures,'I')



print('\r\n')
print('RFC')
RFC.RFClassifier(malware_data,malware_feature,'A')
print('Random Forest with  correlation_features')
RFC.RFClassifier(malware_data,correlation_features,'C')

print('Random Forest with  important features')
RFC_important=feature_selection.RFImportant(malware_data)
RFC.RFClassifier(malware_data,RFC_important,'I')





#output = pd.DataFrame({'Class': test_preds,'Id':malware_test.index})
#output.to_csv('submission1.csv', index=False)

#classificatore 2
#random forest Regressor
#print('\r\n')
#print('random forest Regressor')
#MRFR.MalwareRandomForestRegressor(malware_data,malware_feature)


#classificatore 3 XGBoostRegressor
#print('\r\n')
#print('XGBoostRegressor')
#XGBMR.XGBMalwareModelRegressor(malware_data,malware_feature)

#classificatore 3 XGBoostRegressor with importants features
#
#print('XGBoostRegressor with important features')
#importanXBGRegressorFeatures=feature_selection.XGBMalwareModelRegressorImportantFeature(malware_data)
#XGBMR.XGBMalwareModelRegressor(malware_data,importanXBGRegressorFeatures)
#classificatore 4 XGBoostRegressor

#print('\r\n')
#print('KNN')
#KNN.KNN(malware_data,malware_feature)

