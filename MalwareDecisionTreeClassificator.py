# -*- coding: utf-8 -*-
"""
Created on Thu Jun 20 20:16:09 2019

@author: USER
"""
from sklearn.model_selection import train_test_split
from sklearn.compose import ColumnTransformer
from sklearn.tree import DecisionTreeClassifier 
from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_absolute_error,classification_report
import pandas as pd
from sklearn.pipeline import make_pipeline

from sklearn.model_selection import cross_val_score
from sklearn.impute import SimpleImputer

def get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y):
    model = DecisionTreeClassifier(max_leaf_nodes=max_leaf_nodes, random_state=0)
    model.fit(train_X, train_y)
    preds_val = model.predict(val_X)
    mae = mean_absolute_error(val_y, preds_val)
    return(mae) 
    
def MalwareDecisionTreeClassifier(dataset,features,t):
     X = dataset[features]
     y = dataset.Class
     train_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1)
     
     candidate_max_leaf_nodes = [5, 25, 50, 100, 250, 500,1000]
     for max_l in candidate_max_leaf_nodes :
         get_mae(max_l, train_X, val_X, train_y, val_y)
     scores = {leaf_size: get_mae(leaf_size, train_X, val_X, train_y, val_y) for leaf_size in candidate_max_leaf_nodes}
     best_tree_size = min(scores, key=scores.get)
     print('best tree size: ',best_tree_size)
    

     
     X_full = dataset[features]
     y = dataset.Class
    #print(dataset.corr(method='pearson', min_periods=1))
    
     X_train_full, X_valid_full, y_train, y_valid = train_test_split(X_full, y,train_size=0.8, test_size=0.2,random_state=0)
     categorical_cols = [cname for cname in X_train_full.columns if
                    X_train_full[cname].nunique() < 10 and 
                    X_train_full[cname].dtype == "object"]

# Select numerical columns
     numerical_cols = [cname for cname in X_train_full.columns if 
                    X_train_full[cname].dtype in ['int64', 'float64']]
     my_cols = categorical_cols + numerical_cols
     X_train = X_train_full[my_cols].copy()
     X_valid = X_valid_full[my_cols].copy()
    #X_test = X_test_full[my_cols].copy()
    
     numerical_transformer = SimpleImputer(strategy='constant')
    
    # Preprocessing for categorical data
     categorical_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='most_frequent')),
        ('onehot', OneHotEncoder(handle_unknown='ignore'))
     ])
    
    # Bundle preprocessing for numerical and categorical data
     preprocessor = ColumnTransformer(
        transformers=[
            ('num', numerical_transformer, numerical_cols),
            ('cat', categorical_transformer, categorical_cols)
        ])
    
    # Define model
     model=DecisionTreeClassifier(max_leaf_nodes=best_tree_size, random_state=1)
    
    # Bundle preprocessing and modeling code in a pipeline
     clf = Pipeline(steps=[('preprocessor', preprocessor),
                          ('model', model)
                         ])
    
    # Preprocessing of training data, fit model 
     clf.fit(X_train, y_train)
    
    # Preprocessing of validation data, get predictions
     preds = clf.predict(X_valid)
    
     print('MAE:', mean_absolute_error(y_valid, preds))
    
     dataset_test = 'D:/USER/malware/CSV/test.csv'
     dataset_test = pd.read_csv(dataset_test,index_col='Id') 
     test_X= dataset_test[features]
    
    
     preds = clf.predict(test_X)
    
    
     print("\r\n")
     print("predizione")
     print (preds)
     
     if(t=='I'):
        output = pd.DataFrame({'Class': preds,'Id':dataset_test.index})
        output.to_csv('MDTC_prediction_important.csv', index=False)
     if(t=='C'):
        output = pd.DataFrame({'Class': preds,'Id':dataset_test.index})
        output.to_csv('MDTC_prediction_correlate.csv', index=False)
     if(t=='A'):
        output = pd.DataFrame({'Class': preds,'Id':dataset_test.index})
        output.to_csv('MDTC_prediction_all.csv', index=False)
        