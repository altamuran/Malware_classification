# -*- coding: utf-8 -*-
"""
Created on Thu Jun 20 20:31:42 2019

@author: USER
"""
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split
import pandas as pd
from xgboost import XGBClassifier
from sklearn.pipeline import make_pipeline
from sklearn.impute import SimpleImputer
from sklearn.model_selection import cross_val_score
from sklearn.metrics import classification_report,precision_score


def get_mae_XGB_Classifier(max_leaf_nodes, train_X, val_X, train_y, val_y):
    model = XGBClassifier(max_leaf_nodes=max_leaf_nodes, random_state=0)
    model.fit(train_X, train_y)
    preds_val = model.predict(val_X)
    mae = mean_absolute_error(val_y, preds_val)
    return(mae) 
    
def XGBClassifierMalware(dataset,features,t):
    X = dataset[features]
    y = dataset.Class
    #print(dataset.corr(method='pearson', min_periods=1))
    
    train_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1)
    candidate_max_leaf_nodes = [5, 25, 50, 100, 250, 500,1000]
    
    for max_l in candidate_max_leaf_nodes :
         get_mae_XGB_Classifier(max_l, train_X, val_X, train_y, val_y)
    scores = {leaf_size: get_mae_XGB_Classifier(leaf_size, train_X, val_X, train_y, val_y) for leaf_size in candidate_max_leaf_nodes}
    best_tree_size = min(scores, key=scores.get)
    print('best tree size: ',best_tree_size)
     
    
    my_pipeline = make_pipeline(SimpleImputer(), XGBClassifier(learning_rate=0.1,max_leaf_nodes=best_tree_size,n_estimators=100))
    scores = cross_val_score(my_pipeline, X, y, scoring='neg_mean_absolute_error')
    print('Mean Absolute Error %2f' %(-1 * scores.mean()))
    
    my_imputer = SimpleImputer()
    imputed_X_train = pd.DataFrame(my_imputer.fit_transform(train_X))
    imputed_X_valid = pd.DataFrame(my_imputer.transform(val_X))
     
    imputed_X_train.columns = train_X.columns
    imputed_X_valid.columns = val_X.columns
    
    XGBClassifierMalware=XGBClassifier(learning_rate=0.1,max_leaf_nodes=best_tree_size,n_estimators=100)
    XGBClassifierMalware.fit(imputed_X_train, train_y, 
                 early_stopping_rounds=5, 
                 eval_set=[(val_X, val_y)], 
                 verbose=False)
    val_predictions = XGBClassifierMalware.predict(imputed_X_valid)
    print("XGBClassifierMalware"+"\r\n")
    print('preds:', val_predictions)
    val_mae = mean_absolute_error(val_predictions, val_y)
    print('MAE:', val_mae)
    
    #target_names  =  [ '1','2','3','4','5','6','7','8','9' ]
    #print(classification_report(val_predictions, val_y, target_names=target_names))
    
    dataset_test = 'D:/USER/malware/CSV/test.csv'
    dataset_test = pd.read_csv(dataset_test,index_col='Id') 
    test_X= dataset_test[features]
    
    
    preds = XGBClassifierMalware.predict(test_X)
    print("\r\n")
    print("predizione")
    print (preds)
    if(t=='I'):
        output = pd.DataFrame({'Class': preds,'Id':dataset_test.index})
        output.to_csv('XGBClassifierMalware_prediction_important.csv', index=False)
    if(t=='C'):
        output = pd.DataFrame({'Class': preds,'Id':dataset_test.index})
        output.to_csv('XGBClassifierMalware_prediction_correlation.csv', index=False)
    if(t=='A'):
        output = pd.DataFrame({'Class': preds,'Id':dataset_test.index})
        output.to_csv('XGBClassifierMalware_prediction_all.csv', index=False)