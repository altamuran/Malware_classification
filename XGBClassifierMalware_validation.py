# -*- coding: utf-8 -*-
"""
Created on Sun Jun 30 11:36:27 2019

@author: USER
"""

# -*- coding: utf-8 -*
import csv
import os
import pandas as pd  
import numpy as np  
from csv import writer
import matplotlib.pyplot as plt
from sklearn.metrics import multilabel_confusion_matrix,classification_report,precision_score

#import pylab as plt


predizioni = np.array([])
malware_result = 'D:/USER/malware/result.csv'
malware_result = pd.read_csv(malware_result,index_col='Id')

malware_feature = malware_result.columns
#malware_feature=malware_feature.drop("Id")
malware_result = malware_result[malware_feature]

test=pd.DataFrame(malware_result)

#print(test.Prediction1.max())
#print(test[0:1].max())

test['COL']=test.apply(lambda x:x[(x==x.max())].index.to_series().sample(frac=1).iloc[0], axis=1)
for col in test['COL']:
    predizioni = np.append(predizioni, col.replace('Prediction',''))

test['max_value'] = test.max(axis=1)
test['Prediction'] = predizioni
#print(test)


output = pd.DataFrame({'Id':malware_result.index,'Pred': test['Prediction']})
output.to_csv('validation.csv', index=False)
print('\r\n')
print('Validazione modelli')



a = pd.read_csv("D:/USER/malware/validation.csv")
b = pd.read_csv("D:/USER/malware/XGBClassifierMalware_prediction_important.csv")
b = b.dropna(axis=1)
merged = a.merge(b, on='Id')
merged.to_csv("D:/USER/malware/validation/XGBClassifierMalware_prediction_important_validation.csv", index=False)

print('XGB validation with importance')
malware_true_data_path = 'D:/USER/malware/validation/XGBClassifierMalware_prediction_important_validation.csv'
true_data = pd.read_csv(malware_true_data_path)#,index_col='Id') 
true_data = true_data.dropna(axis=0)
malware_feature = true_data.columns
#malware_feature=malware_feature.drop("Class")
y_true= true_data['Pred']
y_pred= true_data['Class']
target_names  =  [ '1','2','3','4','5','6','7','8','9' ]
mcm = multilabel_confusion_matrix(y_true, y_pred,labels=[1,2,3,4,5,6,7,8,9])
tn = mcm[:, 0, 0]
tp = mcm[:, 1, 1]
fn = mcm[:, 1, 0]
fp = mcm[:, 0, 1]

true_positive_rate= tp/(tp + fn)
print('true_positive_rate :',true_positive_rate)
print(classification_report(y_true, y_pred, target_names=target_names))
print(precision_score(y_true, y_pred, labels=[1,2,3,4,5,6,7,8,9], average='macro'))
count_class=true_data.groupby('Class').count()
print(count_class['Id'])



a = pd.read_csv("D:/USER/malware/validation.csv")
b = pd.read_csv("D:/USER/malware/XGBClassifierMalware_prediction_correlation.csv")
b = b.dropna(axis=1)
merged = a.merge(b, on='Id')
merged.to_csv("D:/USER/malware/validation/XGBClassifierMalware_prediction_correlation_validate.csv", index=False)

print('XGB validation correlation')
malware_true_data_path = 'D:/USER/malware/validation/XGBClassifierMalware_prediction_correlation_validate.csv'
true_data = pd.read_csv(malware_true_data_path)#,index_col='Id') 
true_data = true_data.dropna(axis=0)
malware_feature = true_data.columns
#malware_feature=malware_feature.drop("Class")
y_true= true_data['Pred']
y_pred= true_data['Class']
target_names  =  [ '1','2','3','4','5','6','7','8','9' ]
mcm = multilabel_confusion_matrix(y_true, y_pred,labels=[1,2,3,4,5,6,7,8,9])
tn = mcm[:, 0, 0]
tp = mcm[:, 1, 1]
fn = mcm[:, 1, 0]
fp = mcm[:, 0, 1]

true_positive_rate= tp/(tp + fn)
print('true_positive_rate :',true_positive_rate)
print(classification_report(y_true, y_pred, target_names=target_names))
print(precision_score(y_true, y_pred, labels=[1,2,3,4,5,6,7,8,9], average='macro'))
count_class=true_data.groupby('Class').count()
print(count_class['Id'])


a = pd.read_csv("D:/USER/malware/validation.csv")
b = pd.read_csv("D:/USER/malware/XGBClassifierMalware_prediction_all.csv")
b = b.dropna(axis=1)
merged = a.merge(b, on='Id')
merged.to_csv("D:/USER/malware/validation/XGBClassifierMalware_prediction_all_validation.csv", index=False)

print('XGB validation all')
malware_true_data_path = 'D:/USER/malware/validation/XGBClassifierMalware_prediction_all_validation.csv'
true_data = pd.read_csv(malware_true_data_path)#,index_col='Id') 
true_data = true_data.dropna(axis=0)
malware_feature = true_data.columns
#malware_feature=malware_feature.drop("Class")
y_true= true_data['Pred']
y_pred= true_data['Class']
target_names  =  [ '1','2','3','4','5','6','7','8','9' ]
mcm = multilabel_confusion_matrix(y_true, y_pred,labels=[1,2,3,4,5,6,7,8,9])
tn = mcm[:, 0, 0]
tp = mcm[:, 1, 1]
fn = mcm[:, 1, 0]
fp = mcm[:, 0, 1]

true_positive_rate= tp/(tp + fn)
print('true_positive_rate :',true_positive_rate)
print(classification_report(y_true, y_pred, target_names=target_names))
print(precision_score(y_true, y_pred, labels=[1,2,3,4,5,6,7,8,9], average='macro'))
count_class=true_data.groupby('Class').count()



from matplotlib.pyplot import pie, axis, show
axis('equal');
patches, texts = plt.pie(count_class['Id'].values,labels=count_class.Id,startangle=90)
target_names  =  [ 'Ramnit','Lollipop ','Kelihos_ver3','Vundo','Simda','Tracur','Kelihos_ver1','Obfuscator.ACY','Gatak' ]
labels = target_names
#pie(count_class['Id'].values, labels=count_class.Id);
plt.legend(patches, labels, loc="1")
show()




